#include <iostream>
using namespace std;
class Heap{
public:
int arr[100];
int size = 0;

Heap(){
  size = 0;
  arr[0] = -1;
}


//insertion
void insert(int val){
  size = size + 1;
  int idx = size;
  arr[idx] = val;
  while(idx > 1){
    int parent = idx/2;
    if(arr[idx] > arr[parent]){
      swap(arr[idx], arr[parent]);
      idx = parent;
    } else{
      return;
    }
  }
}


//deleteion
 void deletefromHeap(){
     if(size == 0){
         cout<<"Nothing to delete"<<endl;
         return;
     }
     //swapping root and last node
     arr[1] = arr[size];
     //removing access (deletion)
     size--;
     
    
     int i = 1;
     while(i<size){
     int leftIndex = i*2;
     int rightIndex = 2*i + 1; 
     
     if(leftIndex < size && arr[i] < arr[leftIndex]){
         swap(arr[i], arr[leftIndex]);
         i = leftIndex;
     } else if(rightIndex < size && arr[i] < arr[rightIndex]){
         swap(arr[i], arr[rightIndex]);
         i = rightIndex;
     } else{
         return;
     }
     }
     
 }
 //print the tree

 void print(){
   for(int i = 1;i<=size;i++){
     cout<<arr[i]<<" ";
   } cout<<endl;
 }
};
int main(){
  Heap h;
  h.insert(55);
  h.insert(100);
  h.insert(99);
  h.insert(101);
  h.insert(56);
  h.print();
  h.deletefromHeap();
  h.print();
  return 0;
}
